type ContractRegistry @entity {
  id: ID!
  converterRegistries: [ConverterRegistry!]
  contracts: [BancorContract!] @derivedFrom(field: "registry")
  owner: String
}

type BancorContract @entity {
  id: ID!
  name: String
  registry: ContractRegistry
}

type ConverterRegistry @entity {
  id: ID!
  converters: [Converter!]
  smartTokens: [Token!]
  connectorTokens: [Token!]
  owner: String
  addedToContractRegistryAtBlockTimestamp: BigInt
  addedToContractRegistryAtTransactionHash: String
  addedToContractRegistryAtBlockNumber: BigInt
  lastUsedAtBlockTimestamp: BigInt
  lastUsedAtTransactionHash: String
  lastUsedAtBlockNumber: BigInt
  numConverters: BigInt
}

type Converter @entity {
  id: ID!
  version: String
  type: String
  smartToken: Token 
  connectorTokens: [Token!] 
  connectors: [Connector!] @derivedFrom(field: "converter")
  quickBuyPath: [QuickBuyPathMember!]
  quickBuyPathLength: Int
  owner: String
  manager: String
  conversionFee: BigInt
  weight: BigInt
  # maxWeight: BigInt
  maxConversionFee: BigInt
  lastResetBlockNumber: BigInt
  lastResetTimestamp: BigInt
  firstAddedToRegistryBlockNumber: BigInt
  firstAddedToRegistryBlockTimestamp: BigInt
  currentConverterRegistry: ConverterRegistry
  currentContractRegistry: ContractRegistry
  tokenBalances: [ConverterTokenBalance!] @derivedFrom(field: "converter")
  tokenSwapTotals: [ConverterTokenSwapTotal!] @derivedFrom(field: "converter")
}

type QuickBuyPathMember @entity {
  id: ID!
  index: Int!
  token: Token!
}

type Token @entity {
  id: ID!
  name: String
  symbol: String
  decimals: Int
  isSmartToken: Boolean
  version: String
  standard: String
  smartTokenType: String # Relay, Liquid, BNT?, Others?
  transfersEnabled: Boolean
  converters: [Converter!]
  connectorTokens: [Token!]
  shortestQuickBuyPath: [QuickBuyPathMember!]
  converterWithShortestQuickBuyPath: Converter
  owner: String
  tokenSwapTotals: [TokenSwapTotal!] @derivedFrom(field: "toToken")
  currentConverterRegistry: ConverterRegistry
  addedToRegistryBlockNumber: BigInt
  addedToRegistryTransactionHash: String
}

type Connector @entity {
  id: ID!
  virtualBalance: BigInt
  weight: BigInt
  isVirtualBalanceEnabled: Boolean
  isPurchaseEnabled: Boolean
  isSet: Boolean
  connectorToken: Token
  converter: Converter
}

type Swap @entity {
  id: ID! # Concatenation of transaction hash + "-" + logIndex + "-" + trader address (User.id)
  fromToken: Token!
  toToken: Token!
  amountPurchased: BigInt
  amountReturned: BigInt
  price: BigDecimal
  inversePrice: BigDecimal
  converterWeight: BigInt
  converterFromTokenBalanceBeforeSwap: BigInt
  converterFromTokenBlanceAfterSwap: BigInt
  converterToTokenBalanceBeforeSwap: BigInt
  converterToTokenBalanceAfterSwap: BigInt
  slippage: BigDecimal
  conversionFee: BigInt
  converterUsed: Converter
  transaction: Transaction
  trader: User
  timestamp: BigInt
  logIndex: Int
}

type Transaction @entity {
  id: ID!
  blockNumber: BigInt
  blockTimestamp: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  swaps: [Swap!] @derivedFrom(field: "transaction")
}

type UserTokenSwapTotal @entity {
  id: ID! # Concatenation of user, fromToken, and toToken addresses
  user: User!
  fromToken: Token!
  toToken: Token!
  totalAmountPurchased: BigInt
  totalAmountReturned: BigInt
}

type TokenSwapTotal @entity {
  id: ID! # Concatenation of fromToken and toToken addresses
  fromToken: Token!
  toToken: Token!
  totalAmountPurchased: BigInt
  totalAmountReturned: BigInt
}

type ConverterTokenSwapTotal @entity {
  id: ID! # Concatenation of converter, fromToken, and toToken addresses
  converter: Converter!
  fromToken: Token!
  toToken: Token!
  totalAmountPurchased: BigInt
  totalAmountReturned: BigInt
}

type ConverterTokenBalance @entity {
  id: ID! # Concatenation of converter address and token address
  converter: Converter
  token: Token
  balance: BigInt
}

type UserSmartTokenBalance @entity {
  id: ID! # Concatenation of user and smartToken address
  user: User!
  smartToken: Token
  balance: BigInt
}

type User @entity {
  id: ID!
  numSwaps: BigInt
  swaps: [Swap!] @derivedFrom(field: "trader")
  tokenSwapTotals: [UserTokenSwapTotal!] @derivedFrom(field: "user")
  smartTokenBalances: [UserSmartTokenBalance!] @derivedFrom (field: "user")
}