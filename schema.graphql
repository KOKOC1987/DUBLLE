type ContractRegistry @entity {
  id: ID!
  converterRegistries: [ConverterRegistry!]
  contracts: [BancorContract!] @derivedFrom(field: "registry")
  owner: String
}

type BancorContract @entity {
  id: ID!
  name: String
  registry: ContractRegistry
}

type ConverterRegistry @entity {
  id: ID!
  converters: [Converter!]
  smartTokens: [Token!]
  connectorTokens: [Token!]
  owner: String
}

type Converter @entity {
  id: ID!
  version: String
  type: String
  smartToken: Token 
  connectorTokens: [Token!] 
  connectors: [Connector!] @derivedFrom(field: "converter")
  quickBuyPath: [QuickBuyPathMember!]
  quickBuyPathLength: Int
  owner: String
  manager: String
  conversionFee: BigInt
  weight: BigInt
  # maxWeight: BigInt
  maxConversionFee: BigInt
  bntBalance: BigInt
  tokenBalance: BigInt
}

type QuickBuyPathMember @entity {
  id: ID!
  index: Int!
  token: Token!
}

type Token @entity {
  id: ID!
  name: String
  symbol: String
  decimals: Int
  isSmartToken: Boolean
  version: String
  standard: String
  smartTokenType: String # Relay, Liquid, BNT?, Others?
  transfersEnabled: Boolean
  converters: [Converter!]
  connectorTokens: [Token!]
  shortestQuickBuyPath: [QuickBuyPathMember!]
  converterWithShortestQuickBuyPath: Converter
  owner: String
}

type Connector @entity {
  id: ID!
  virtualBalance: BigInt
  weight: BigInt
  isVirtualBalanceEnabled: Boolean
  isPurchaseEnabled: Boolean
  isSet: Boolean
  connectorToken: Token
  converter: Converter
}

type Swap @entity {
  id: ID!
  fromToken: Token!
  toToken: Token!
  amountPurchased: BigInt
  amountReturned: BigInt
  conversionFee: BigInt
  converterUsed: Converter
  transaction: Transaction
  trader: User
  logIndex: Int
}

type Transaction @entity {
  id: ID!
  blockNumber: BigInt
  blockTimestamp: BigInt
  gasUsed: BigInt
  gasPrice: BigInt
  swaps: [Swap!] @derivedFrom(field: "transaction")
}

type UserTokenSwapTotal @entity {
  id: ID! # Concatenation of user, fromToken, and toToken addresses
  user: User!
  fromToken: Token!
  toToken: Token!
  totalAmountPurchased: BigInt
  totalAmountReturned: BigInt
}

type User @entity {
  id: ID!
  numSwaps: BigInt
  swaps: [Swap!] @derivedFrom(field: "trader")
  tokenSwapTotals: [UserTokenSwapTotal!] @derivedFrom(field: "user")
}