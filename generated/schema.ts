// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ContractRegistry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ContractRegistry entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ContractRegistry entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ContractRegistry", id.toString(), this);
  }

  static load(id: string): ContractRegistry | null {
    return store.get("ContractRegistry", id) as ContractRegistry | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get converterRegistries(): Array<string> | null {
    let value = this.get("converterRegistries");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set converterRegistries(value: Array<string> | null) {
    if (value === null) {
      this.unset("converterRegistries");
    } else {
      this.set(
        "converterRegistries",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get contracts(): Array<string> | null {
    let value = this.get("contracts");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set contracts(value: Array<string> | null) {
    if (value === null) {
      this.unset("contracts");
    } else {
      this.set("contracts", Value.fromStringArray(value as Array<string>));
    }
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(value as string));
    }
  }
}

export class BancorContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BancorContract entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BancorContract entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BancorContract", id.toString(), this);
  }

  static load(id: string): BancorContract | null {
    return store.get("BancorContract", id) as BancorContract | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get registry(): string | null {
    let value = this.get("registry");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set registry(value: string | null) {
    if (value === null) {
      this.unset("registry");
    } else {
      this.set("registry", Value.fromString(value as string));
    }
  }
}

export class ConverterRegistry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ConverterRegistry entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ConverterRegistry entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ConverterRegistry", id.toString(), this);
  }

  static load(id: string): ConverterRegistry | null {
    return store.get("ConverterRegistry", id) as ConverterRegistry | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get converters(): Array<string> | null {
    let value = this.get("converters");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set converters(value: Array<string> | null) {
    if (value === null) {
      this.unset("converters");
    } else {
      this.set("converters", Value.fromStringArray(value as Array<string>));
    }
  }

  get smartTokens(): Array<string> | null {
    let value = this.get("smartTokens");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set smartTokens(value: Array<string> | null) {
    if (value === null) {
      this.unset("smartTokens");
    } else {
      this.set("smartTokens", Value.fromStringArray(value as Array<string>));
    }
  }

  get connectorTokens(): Array<string> | null {
    let value = this.get("connectorTokens");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set connectorTokens(value: Array<string> | null) {
    if (value === null) {
      this.unset("connectorTokens");
    } else {
      this.set(
        "connectorTokens",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(value as string));
    }
  }
}

export class Converter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Converter entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Converter entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Converter", id.toString(), this);
  }

  static load(id: string): Converter | null {
    return store.get("Converter", id) as Converter | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get version(): string | null {
    let value = this.get("version");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set version(value: string | null) {
    if (value === null) {
      this.unset("version");
    } else {
      this.set("version", Value.fromString(value as string));
    }
  }

  get type(): string | null {
    let value = this.get("type");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (value === null) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(value as string));
    }
  }

  get smartToken(): string | null {
    let value = this.get("smartToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set smartToken(value: string | null) {
    if (value === null) {
      this.unset("smartToken");
    } else {
      this.set("smartToken", Value.fromString(value as string));
    }
  }

  get connectorTokens(): Array<string> | null {
    let value = this.get("connectorTokens");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set connectorTokens(value: Array<string> | null) {
    if (value === null) {
      this.unset("connectorTokens");
    } else {
      this.set(
        "connectorTokens",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get connectors(): Array<string> | null {
    let value = this.get("connectors");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set connectors(value: Array<string> | null) {
    if (value === null) {
      this.unset("connectors");
    } else {
      this.set("connectors", Value.fromStringArray(value as Array<string>));
    }
  }

  get quickBuyPath(): Array<string> | null {
    let value = this.get("quickBuyPath");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set quickBuyPath(value: Array<string> | null) {
    if (value === null) {
      this.unset("quickBuyPath");
    } else {
      this.set("quickBuyPath", Value.fromStringArray(value as Array<string>));
    }
  }

  get quickBuyPathLength(): i32 {
    let value = this.get("quickBuyPathLength");
    return value.toI32();
  }

  set quickBuyPathLength(value: i32) {
    this.set("quickBuyPathLength", Value.fromI32(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(value as string));
    }
  }

  get manager(): string | null {
    let value = this.get("manager");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set manager(value: string | null) {
    if (value === null) {
      this.unset("manager");
    } else {
      this.set("manager", Value.fromString(value as string));
    }
  }

  get conversionFee(): BigInt | null {
    let value = this.get("conversionFee");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set conversionFee(value: BigInt | null) {
    if (value === null) {
      this.unset("conversionFee");
    } else {
      this.set("conversionFee", Value.fromBigInt(value as BigInt));
    }
  }

  get weight(): BigInt | null {
    let value = this.get("weight");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set weight(value: BigInt | null) {
    if (value === null) {
      this.unset("weight");
    } else {
      this.set("weight", Value.fromBigInt(value as BigInt));
    }
  }

  get maxConversionFee(): BigInt | null {
    let value = this.get("maxConversionFee");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxConversionFee(value: BigInt | null) {
    if (value === null) {
      this.unset("maxConversionFee");
    } else {
      this.set("maxConversionFee", Value.fromBigInt(value as BigInt));
    }
  }

  get tokenBalances(): Array<string> | null {
    let value = this.get("tokenBalances");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokenBalances(value: Array<string> | null) {
    if (value === null) {
      this.unset("tokenBalances");
    } else {
      this.set("tokenBalances", Value.fromStringArray(value as Array<string>));
    }
  }

  get tokenSwapTotals(): Array<string> | null {
    let value = this.get("tokenSwapTotals");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokenSwapTotals(value: Array<string> | null) {
    if (value === null) {
      this.unset("tokenSwapTotals");
    } else {
      this.set(
        "tokenSwapTotals",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }
}

export class QuickBuyPathMember extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save QuickBuyPathMember entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save QuickBuyPathMember entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("QuickBuyPathMember", id.toString(), this);
  }

  static load(id: string): QuickBuyPathMember | null {
    return store.get("QuickBuyPathMember", id) as QuickBuyPathMember | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get isSmartToken(): boolean {
    let value = this.get("isSmartToken");
    return value.toBoolean();
  }

  set isSmartToken(value: boolean) {
    this.set("isSmartToken", Value.fromBoolean(value));
  }

  get version(): string | null {
    let value = this.get("version");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set version(value: string | null) {
    if (value === null) {
      this.unset("version");
    } else {
      this.set("version", Value.fromString(value as string));
    }
  }

  get standard(): string | null {
    let value = this.get("standard");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set standard(value: string | null) {
    if (value === null) {
      this.unset("standard");
    } else {
      this.set("standard", Value.fromString(value as string));
    }
  }

  get smartTokenType(): string | null {
    let value = this.get("smartTokenType");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set smartTokenType(value: string | null) {
    if (value === null) {
      this.unset("smartTokenType");
    } else {
      this.set("smartTokenType", Value.fromString(value as string));
    }
  }

  get transfersEnabled(): boolean {
    let value = this.get("transfersEnabled");
    return value.toBoolean();
  }

  set transfersEnabled(value: boolean) {
    this.set("transfersEnabled", Value.fromBoolean(value));
  }

  get converters(): Array<string> | null {
    let value = this.get("converters");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set converters(value: Array<string> | null) {
    if (value === null) {
      this.unset("converters");
    } else {
      this.set("converters", Value.fromStringArray(value as Array<string>));
    }
  }

  get connectorTokens(): Array<string> | null {
    let value = this.get("connectorTokens");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set connectorTokens(value: Array<string> | null) {
    if (value === null) {
      this.unset("connectorTokens");
    } else {
      this.set(
        "connectorTokens",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get shortestQuickBuyPath(): Array<string> | null {
    let value = this.get("shortestQuickBuyPath");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set shortestQuickBuyPath(value: Array<string> | null) {
    if (value === null) {
      this.unset("shortestQuickBuyPath");
    } else {
      this.set(
        "shortestQuickBuyPath",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get converterWithShortestQuickBuyPath(): string | null {
    let value = this.get("converterWithShortestQuickBuyPath");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set converterWithShortestQuickBuyPath(value: string | null) {
    if (value === null) {
      this.unset("converterWithShortestQuickBuyPath");
    } else {
      this.set(
        "converterWithShortestQuickBuyPath",
        Value.fromString(value as string)
      );
    }
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(value as string));
    }
  }

  get tokenSwapTotals(): Array<string> | null {
    let value = this.get("tokenSwapTotals");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokenSwapTotals(value: Array<string> | null) {
    if (value === null) {
      this.unset("tokenSwapTotals");
    } else {
      this.set(
        "tokenSwapTotals",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get currentRegistry(): string | null {
    let value = this.get("currentRegistry");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentRegistry(value: string | null) {
    if (value === null) {
      this.unset("currentRegistry");
    } else {
      this.set("currentRegistry", Value.fromString(value as string));
    }
  }

  get addedToRegistryBlockNumber(): BigInt | null {
    let value = this.get("addedToRegistryBlockNumber");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set addedToRegistryBlockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("addedToRegistryBlockNumber");
    } else {
      this.set("addedToRegistryBlockNumber", Value.fromBigInt(value as BigInt));
    }
  }

  get addedToRegistryTransactionHash(): string | null {
    let value = this.get("addedToRegistryTransactionHash");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set addedToRegistryTransactionHash(value: string | null) {
    if (value === null) {
      this.unset("addedToRegistryTransactionHash");
    } else {
      this.set(
        "addedToRegistryTransactionHash",
        Value.fromString(value as string)
      );
    }
  }
}

export class Connector extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Connector entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Connector entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Connector", id.toString(), this);
  }

  static load(id: string): Connector | null {
    return store.get("Connector", id) as Connector | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get virtualBalance(): BigInt | null {
    let value = this.get("virtualBalance");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set virtualBalance(value: BigInt | null) {
    if (value === null) {
      this.unset("virtualBalance");
    } else {
      this.set("virtualBalance", Value.fromBigInt(value as BigInt));
    }
  }

  get weight(): BigInt | null {
    let value = this.get("weight");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set weight(value: BigInt | null) {
    if (value === null) {
      this.unset("weight");
    } else {
      this.set("weight", Value.fromBigInt(value as BigInt));
    }
  }

  get isVirtualBalanceEnabled(): boolean {
    let value = this.get("isVirtualBalanceEnabled");
    return value.toBoolean();
  }

  set isVirtualBalanceEnabled(value: boolean) {
    this.set("isVirtualBalanceEnabled", Value.fromBoolean(value));
  }

  get isPurchaseEnabled(): boolean {
    let value = this.get("isPurchaseEnabled");
    return value.toBoolean();
  }

  set isPurchaseEnabled(value: boolean) {
    this.set("isPurchaseEnabled", Value.fromBoolean(value));
  }

  get isSet(): boolean {
    let value = this.get("isSet");
    return value.toBoolean();
  }

  set isSet(value: boolean) {
    this.set("isSet", Value.fromBoolean(value));
  }

  get connectorToken(): string | null {
    let value = this.get("connectorToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set connectorToken(value: string | null) {
    if (value === null) {
      this.unset("connectorToken");
    } else {
      this.set("connectorToken", Value.fromString(value as string));
    }
  }

  get converter(): string | null {
    let value = this.get("converter");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set converter(value: string | null) {
    if (value === null) {
      this.unset("converter");
    } else {
      this.set("converter", Value.fromString(value as string));
    }
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromToken(): string {
    let value = this.get("fromToken");
    return value.toString();
  }

  set fromToken(value: string) {
    this.set("fromToken", Value.fromString(value));
  }

  get toToken(): string {
    let value = this.get("toToken");
    return value.toString();
  }

  set toToken(value: string) {
    this.set("toToken", Value.fromString(value));
  }

  get amountPurchased(): BigInt | null {
    let value = this.get("amountPurchased");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountPurchased(value: BigInt | null) {
    if (value === null) {
      this.unset("amountPurchased");
    } else {
      this.set("amountPurchased", Value.fromBigInt(value as BigInt));
    }
  }

  get amountReturned(): BigInt | null {
    let value = this.get("amountReturned");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountReturned(value: BigInt | null) {
    if (value === null) {
      this.unset("amountReturned");
    } else {
      this.set("amountReturned", Value.fromBigInt(value as BigInt));
    }
  }

  get conversionFee(): BigInt | null {
    let value = this.get("conversionFee");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set conversionFee(value: BigInt | null) {
    if (value === null) {
      this.unset("conversionFee");
    } else {
      this.set("conversionFee", Value.fromBigInt(value as BigInt));
    }
  }

  get converterUsed(): string | null {
    let value = this.get("converterUsed");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set converterUsed(value: string | null) {
    if (value === null) {
      this.unset("converterUsed");
    } else {
      this.set("converterUsed", Value.fromString(value as string));
    }
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (value === null) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(value as string));
    }
  }

  get trader(): string | null {
    let value = this.get("trader");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set trader(value: string | null) {
    if (value === null) {
      this.unset("trader");
    } else {
      this.set("trader", Value.fromString(value as string));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    return value.toI32();
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt | null {
    let value = this.get("blockNumber");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("blockNumber");
    } else {
      this.set("blockNumber", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt | null {
    let value = this.get("blockTimestamp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("blockTimestamp");
    } else {
      this.set("blockTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get swaps(): Array<string> | null {
    let value = this.get("swaps");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set swaps(value: Array<string> | null) {
    if (value === null) {
      this.unset("swaps");
    } else {
      this.set("swaps", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class UserTokenSwapTotal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserTokenSwapTotal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserTokenSwapTotal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserTokenSwapTotal", id.toString(), this);
  }

  static load(id: string): UserTokenSwapTotal | null {
    return store.get("UserTokenSwapTotal", id) as UserTokenSwapTotal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get fromToken(): string {
    let value = this.get("fromToken");
    return value.toString();
  }

  set fromToken(value: string) {
    this.set("fromToken", Value.fromString(value));
  }

  get toToken(): string {
    let value = this.get("toToken");
    return value.toString();
  }

  set toToken(value: string) {
    this.set("toToken", Value.fromString(value));
  }

  get totalAmountPurchased(): BigInt | null {
    let value = this.get("totalAmountPurchased");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountPurchased(value: BigInt | null) {
    if (value === null) {
      this.unset("totalAmountPurchased");
    } else {
      this.set("totalAmountPurchased", Value.fromBigInt(value as BigInt));
    }
  }

  get totalAmountReturned(): BigInt | null {
    let value = this.get("totalAmountReturned");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountReturned(value: BigInt | null) {
    if (value === null) {
      this.unset("totalAmountReturned");
    } else {
      this.set("totalAmountReturned", Value.fromBigInt(value as BigInt));
    }
  }
}

export class TokenSwapTotal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenSwapTotal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenSwapTotal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenSwapTotal", id.toString(), this);
  }

  static load(id: string): TokenSwapTotal | null {
    return store.get("TokenSwapTotal", id) as TokenSwapTotal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromToken(): string {
    let value = this.get("fromToken");
    return value.toString();
  }

  set fromToken(value: string) {
    this.set("fromToken", Value.fromString(value));
  }

  get toToken(): string {
    let value = this.get("toToken");
    return value.toString();
  }

  set toToken(value: string) {
    this.set("toToken", Value.fromString(value));
  }

  get totalAmountPurchased(): BigInt | null {
    let value = this.get("totalAmountPurchased");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountPurchased(value: BigInt | null) {
    if (value === null) {
      this.unset("totalAmountPurchased");
    } else {
      this.set("totalAmountPurchased", Value.fromBigInt(value as BigInt));
    }
  }

  get totalAmountReturned(): BigInt | null {
    let value = this.get("totalAmountReturned");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountReturned(value: BigInt | null) {
    if (value === null) {
      this.unset("totalAmountReturned");
    } else {
      this.set("totalAmountReturned", Value.fromBigInt(value as BigInt));
    }
  }
}

export class ConverterTokenSwapTotal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ConverterTokenSwapTotal entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ConverterTokenSwapTotal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ConverterTokenSwapTotal", id.toString(), this);
  }

  static load(id: string): ConverterTokenSwapTotal | null {
    return store.get(
      "ConverterTokenSwapTotal",
      id
    ) as ConverterTokenSwapTotal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get converter(): string {
    let value = this.get("converter");
    return value.toString();
  }

  set converter(value: string) {
    this.set("converter", Value.fromString(value));
  }

  get fromToken(): string {
    let value = this.get("fromToken");
    return value.toString();
  }

  set fromToken(value: string) {
    this.set("fromToken", Value.fromString(value));
  }

  get toToken(): string {
    let value = this.get("toToken");
    return value.toString();
  }

  set toToken(value: string) {
    this.set("toToken", Value.fromString(value));
  }

  get totalAmountPurchased(): BigInt | null {
    let value = this.get("totalAmountPurchased");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountPurchased(value: BigInt | null) {
    if (value === null) {
      this.unset("totalAmountPurchased");
    } else {
      this.set("totalAmountPurchased", Value.fromBigInt(value as BigInt));
    }
  }

  get totalAmountReturned(): BigInt | null {
    let value = this.get("totalAmountReturned");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountReturned(value: BigInt | null) {
    if (value === null) {
      this.unset("totalAmountReturned");
    } else {
      this.set("totalAmountReturned", Value.fromBigInt(value as BigInt));
    }
  }
}

export class ConverterTokenBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save ConverterTokenBalance entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ConverterTokenBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ConverterTokenBalance", id.toString(), this);
  }

  static load(id: string): ConverterTokenBalance | null {
    return store.get(
      "ConverterTokenBalance",
      id
    ) as ConverterTokenBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get converter(): string | null {
    let value = this.get("converter");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set converter(value: string | null) {
    if (value === null) {
      this.unset("converter");
    } else {
      this.set("converter", Value.fromString(value as string));
    }
  }

  get token(): string | null {
    let value = this.get("token");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (value === null) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(value as string));
    }
  }

  get balance(): BigInt | null {
    let value = this.get("balance");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt | null) {
    if (value === null) {
      this.unset("balance");
    } else {
      this.set("balance", Value.fromBigInt(value as BigInt));
    }
  }
}

export class UserSmartTokenBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UserSmartTokenBalance entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserSmartTokenBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserSmartTokenBalance", id.toString(), this);
  }

  static load(id: string): UserSmartTokenBalance | null {
    return store.get(
      "UserSmartTokenBalance",
      id
    ) as UserSmartTokenBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get smartToken(): string | null {
    let value = this.get("smartToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set smartToken(value: string | null) {
    if (value === null) {
      this.unset("smartToken");
    } else {
      this.set("smartToken", Value.fromString(value as string));
    }
  }

  get balance(): BigInt | null {
    let value = this.get("balance");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt | null) {
    if (value === null) {
      this.unset("balance");
    } else {
      this.set("balance", Value.fromBigInt(value as BigInt));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get numSwaps(): BigInt | null {
    let value = this.get("numSwaps");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSwaps(value: BigInt | null) {
    if (value === null) {
      this.unset("numSwaps");
    } else {
      this.set("numSwaps", Value.fromBigInt(value as BigInt));
    }
  }

  get swaps(): Array<string> | null {
    let value = this.get("swaps");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set swaps(value: Array<string> | null) {
    if (value === null) {
      this.unset("swaps");
    } else {
      this.set("swaps", Value.fromStringArray(value as Array<string>));
    }
  }

  get tokenSwapTotals(): Array<string> | null {
    let value = this.get("tokenSwapTotals");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokenSwapTotals(value: Array<string> | null) {
    if (value === null) {
      this.unset("tokenSwapTotals");
    } else {
      this.set(
        "tokenSwapTotals",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get smartTokenBalances(): Array<string> | null {
    let value = this.get("smartTokenBalances");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set smartTokenBalances(value: Array<string> | null) {
    if (value === null) {
      this.unset("smartTokenBalances");
    } else {
      this.set(
        "smartTokenBalances",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }
}
