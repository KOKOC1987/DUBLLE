// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Conversion extends EthereumEvent {
  get params(): Conversion__Params {
    return new Conversion__Params(this);
  }
}

export class Conversion__Params {
  _event: Conversion;

  constructor(event: Conversion) {
    this._event = event;
  }

  get _fromToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _toToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _trader(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _return(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _currentPriceN(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get _currentPriceD(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ConversionFeeUpdate extends EthereumEvent {
  get params(): ConversionFeeUpdate__Params {
    return new ConversionFeeUpdate__Params(this);
  }
}

export class ConversionFeeUpdate__Params {
  _event: ConversionFeeUpdate;

  constructor(event: ConversionFeeUpdate) {
    this._event = event;
  }

  get _prevFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ManagerUpdate extends EthereumEvent {
  get params(): ManagerUpdate__Params {
    return new ManagerUpdate__Params(this);
  }
}

export class ManagerUpdate__Params {
  _event: ManagerUpdate;

  constructor(event: ManagerUpdate) {
    this._event = event;
  }

  get _prevManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerUpdate extends EthereumEvent {
  get params(): OwnerUpdate__Params {
    return new OwnerUpdate__Params(this);
  }
}

export class OwnerUpdate__Params {
  _event: OwnerUpdate;

  constructor(event: OwnerUpdate) {
    this._event = event;
  }

  get _prevOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Converter__connectorsResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;
  value3: boolean;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: boolean,
    value3: boolean,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromBoolean(this.value2));
    map.set("value3", EthereumValue.fromBoolean(this.value3));
    map.set("value4", EthereumValue.fromBoolean(this.value4));
    return map;
  }
}

export class Converter extends SmartContract {
  static bind(address: Address): Converter {
    return new Converter("Converter", address);
  }

  connectors(param0: Address): Converter__connectorsResult {
    let result = super.call("connectors", [EthereumValue.fromAddress(param0)]);

    return new Converter__connectorsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toBoolean(),
      result[4].toBoolean()
    );
  }

  try_connectors(param0: Address): CallResult<Converter__connectorsResult> {
    let result = super.tryCall("connectors", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Converter__connectorsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toBoolean(),
        value[4].toBoolean()
      )
    );
  }

  connectorTokens(param0: BigInt): Address {
    let result = super.call("connectorTokens", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_connectorTokens(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("connectorTokens", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getReturn(_fromToken: Address, _toToken: Address, _amount: BigInt): BigInt {
    let result = super.call("getReturn", [
      EthereumValue.fromAddress(_fromToken),
      EthereumValue.fromAddress(_toToken),
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBigInt();
  }

  try_getReturn(
    _fromToken: Address,
    _toToken: Address,
    _amount: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getReturn", [
      EthereumValue.fromAddress(_fromToken),
      EthereumValue.fromAddress(_toToken),
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  extensions(): Address {
    let result = super.call("extensions", []);

    return result[0].toAddress();
  }

  try_extensions(): CallResult<Address> {
    let result = super.tryCall("extensions", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getConversionFeeAmount(_amount: BigInt): BigInt {
    let result = super.call("getConversionFeeAmount", [
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBigInt();
  }

  try_getConversionFeeAmount(_amount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("getConversionFeeAmount", [
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  converterType(): string {
    let result = super.call("converterType", []);

    return result[0].toString();
  }

  try_converterType(): CallResult<string> {
    let result = super.tryCall("converterType", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  newManager(): Address {
    let result = super.call("newManager", []);

    return result[0].toAddress();
  }

  try_newManager(): CallResult<Address> {
    let result = super.tryCall("newManager", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  manager(): Address {
    let result = super.call("manager", []);

    return result[0].toAddress();
  }

  try_manager(): CallResult<Address> {
    let result = super.tryCall("manager", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  version(): string {
    let result = super.call("version", []);

    return result[0].toString();
  }

  try_version(): CallResult<string> {
    let result = super.tryCall("version", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  conversionFee(): BigInt {
    let result = super.call("conversionFee", []);

    return result[0].toBigInt();
  }

  try_conversionFee(): CallResult<BigInt> {
    let result = super.tryCall("conversionFee", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  change(
    _fromToken: Address,
    _toToken: Address,
    _amount: BigInt,
    _minReturn: BigInt
  ): BigInt {
    let result = super.call("change", [
      EthereumValue.fromAddress(_fromToken),
      EthereumValue.fromAddress(_toToken),
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromUnsignedBigInt(_minReturn)
    ]);

    return result[0].toBigInt();
  }

  try_change(
    _fromToken: Address,
    _toToken: Address,
    _amount: BigInt,
    _minReturn: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("change", [
      EthereumValue.fromAddress(_fromToken),
      EthereumValue.fromAddress(_toToken),
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromUnsignedBigInt(_minReturn)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  sell(
    _connectorToken: Address,
    _sellAmount: BigInt,
    _minReturn: BigInt
  ): BigInt {
    let result = super.call("sell", [
      EthereumValue.fromAddress(_connectorToken),
      EthereumValue.fromUnsignedBigInt(_sellAmount),
      EthereumValue.fromUnsignedBigInt(_minReturn)
    ]);

    return result[0].toBigInt();
  }

  try_sell(
    _connectorToken: Address,
    _sellAmount: BigInt,
    _minReturn: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("sell", [
      EthereumValue.fromAddress(_connectorToken),
      EthereumValue.fromUnsignedBigInt(_sellAmount),
      EthereumValue.fromUnsignedBigInt(_minReturn)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  connectorTokenCount(): i32 {
    let result = super.call("connectorTokenCount", []);

    return result[0].toI32();
  }

  try_connectorTokenCount(): CallResult<i32> {
    let result = super.tryCall("connectorTokenCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  getSaleReturn(_connectorToken: Address, _sellAmount: BigInt): BigInt {
    let result = super.call("getSaleReturn", [
      EthereumValue.fromAddress(_connectorToken),
      EthereumValue.fromUnsignedBigInt(_sellAmount)
    ]);

    return result[0].toBigInt();
  }

  try_getSaleReturn(
    _connectorToken: Address,
    _sellAmount: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getSaleReturn", [
      EthereumValue.fromAddress(_connectorToken),
      EthereumValue.fromUnsignedBigInt(_sellAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  convert(
    _fromToken: Address,
    _toToken: Address,
    _amount: BigInt,
    _minReturn: BigInt
  ): BigInt {
    let result = super.call("convert", [
      EthereumValue.fromAddress(_fromToken),
      EthereumValue.fromAddress(_toToken),
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromUnsignedBigInt(_minReturn)
    ]);

    return result[0].toBigInt();
  }

  try_convert(
    _fromToken: Address,
    _toToken: Address,
    _amount: BigInt,
    _minReturn: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("convert", [
      EthereumValue.fromAddress(_fromToken),
      EthereumValue.fromAddress(_toToken),
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromUnsignedBigInt(_minReturn)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getQuickBuyPathLength(): BigInt {
    let result = super.call("getQuickBuyPathLength", []);

    return result[0].toBigInt();
  }

  try_getQuickBuyPathLength(): CallResult<BigInt> {
    let result = super.tryCall("getQuickBuyPathLength", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  maxConversionFee(): BigInt {
    let result = super.call("maxConversionFee", []);

    return result[0].toBigInt();
  }

  try_maxConversionFee(): CallResult<BigInt> {
    let result = super.tryCall("maxConversionFee", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getPurchaseReturn(_connectorToken: Address, _depositAmount: BigInt): BigInt {
    let result = super.call("getPurchaseReturn", [
      EthereumValue.fromAddress(_connectorToken),
      EthereumValue.fromUnsignedBigInt(_depositAmount)
    ]);

    return result[0].toBigInt();
  }

  try_getPurchaseReturn(
    _connectorToken: Address,
    _depositAmount: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("getPurchaseReturn", [
      EthereumValue.fromAddress(_connectorToken),
      EthereumValue.fromUnsignedBigInt(_depositAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  buy(
    _connectorToken: Address,
    _depositAmount: BigInt,
    _minReturn: BigInt
  ): BigInt {
    let result = super.call("buy", [
      EthereumValue.fromAddress(_connectorToken),
      EthereumValue.fromUnsignedBigInt(_depositAmount),
      EthereumValue.fromUnsignedBigInt(_minReturn)
    ]);

    return result[0].toBigInt();
  }

  try_buy(
    _connectorToken: Address,
    _depositAmount: BigInt,
    _minReturn: BigInt
  ): CallResult<BigInt> {
    let result = super.tryCall("buy", [
      EthereumValue.fromAddress(_connectorToken),
      EthereumValue.fromUnsignedBigInt(_depositAmount),
      EthereumValue.fromUnsignedBigInt(_minReturn)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  convertibleTokenCount(): i32 {
    let result = super.call("convertibleTokenCount", []);

    return result[0].toI32();
  }

  try_convertibleTokenCount(): CallResult<i32> {
    let result = super.tryCall("convertibleTokenCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  conversionsEnabled(): boolean {
    let result = super.call("conversionsEnabled", []);

    return result[0].toBoolean();
  }

  try_conversionsEnabled(): CallResult<boolean> {
    let result = super.tryCall("conversionsEnabled", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  newOwner(): Address {
    let result = super.call("newOwner", []);

    return result[0].toAddress();
  }

  try_newOwner(): CallResult<Address> {
    let result = super.tryCall("newOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getConnectorBalance(_connectorToken: Address): BigInt {
    let result = super.call("getConnectorBalance", [
      EthereumValue.fromAddress(_connectorToken)
    ]);

    return result[0].toBigInt();
  }

  try_getConnectorBalance(_connectorToken: Address): CallResult<BigInt> {
    let result = super.tryCall("getConnectorBalance", [
      EthereumValue.fromAddress(_connectorToken)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  quickBuyPath(param0: BigInt): Address {
    let result = super.call("quickBuyPath", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_quickBuyPath(param0: BigInt): CallResult<Address> {
    let result = super.tryCall("quickBuyPath", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  convertibleToken(_tokenIndex: i32): Address {
    let result = super.call("convertibleToken", [
      EthereumValue.fromI32(_tokenIndex)
    ]);

    return result[0].toAddress();
  }

  try_convertibleToken(_tokenIndex: i32): CallResult<Address> {
    let result = super.tryCall("convertibleToken", [
      EthereumValue.fromI32(_tokenIndex)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", []);

    return result[0].toAddress();
  }

  try_token(): CallResult<Address> {
    let result = super.tryCall("token", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class UpdateConnectorCall extends EthereumCall {
  get inputs(): UpdateConnectorCall__Inputs {
    return new UpdateConnectorCall__Inputs(this);
  }

  get outputs(): UpdateConnectorCall__Outputs {
    return new UpdateConnectorCall__Outputs(this);
  }
}

export class UpdateConnectorCall__Inputs {
  _call: UpdateConnectorCall;

  constructor(call: UpdateConnectorCall) {
    this._call = call;
  }

  get _connectorToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _weight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _enableVirtualBalance(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _virtualBalance(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateConnectorCall__Outputs {
  _call: UpdateConnectorCall;

  constructor(call: UpdateConnectorCall) {
    this._call = call;
  }
}

export class TransferTokenOwnershipCall extends EthereumCall {
  get inputs(): TransferTokenOwnershipCall__Inputs {
    return new TransferTokenOwnershipCall__Inputs(this);
  }

  get outputs(): TransferTokenOwnershipCall__Outputs {
    return new TransferTokenOwnershipCall__Outputs(this);
  }
}

export class TransferTokenOwnershipCall__Inputs {
  _call: TransferTokenOwnershipCall;

  constructor(call: TransferTokenOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferTokenOwnershipCall__Outputs {
  _call: TransferTokenOwnershipCall;

  constructor(call: TransferTokenOwnershipCall) {
    this._call = call;
  }
}

export class DisableConversionsCall extends EthereumCall {
  get inputs(): DisableConversionsCall__Inputs {
    return new DisableConversionsCall__Inputs(this);
  }

  get outputs(): DisableConversionsCall__Outputs {
    return new DisableConversionsCall__Outputs(this);
  }
}

export class DisableConversionsCall__Inputs {
  _call: DisableConversionsCall;

  constructor(call: DisableConversionsCall) {
    this._call = call;
  }

  get _disable(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class DisableConversionsCall__Outputs {
  _call: DisableConversionsCall;

  constructor(call: DisableConversionsCall) {
    this._call = call;
  }
}

export class SetExtensionsCall extends EthereumCall {
  get inputs(): SetExtensionsCall__Inputs {
    return new SetExtensionsCall__Inputs(this);
  }

  get outputs(): SetExtensionsCall__Outputs {
    return new SetExtensionsCall__Outputs(this);
  }
}

export class SetExtensionsCall__Inputs {
  _call: SetExtensionsCall;

  constructor(call: SetExtensionsCall) {
    this._call = call;
  }

  get _extensions(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetExtensionsCall__Outputs {
  _call: SetExtensionsCall;

  constructor(call: SetExtensionsCall) {
    this._call = call;
  }
}

export class AcceptTokenOwnershipCall extends EthereumCall {
  get inputs(): AcceptTokenOwnershipCall__Inputs {
    return new AcceptTokenOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptTokenOwnershipCall__Outputs {
    return new AcceptTokenOwnershipCall__Outputs(this);
  }
}

export class AcceptTokenOwnershipCall__Inputs {
  _call: AcceptTokenOwnershipCall;

  constructor(call: AcceptTokenOwnershipCall) {
    this._call = call;
  }
}

export class AcceptTokenOwnershipCall__Outputs {
  _call: AcceptTokenOwnershipCall;

  constructor(call: AcceptTokenOwnershipCall) {
    this._call = call;
  }
}

export class AddConnectorCall extends EthereumCall {
  get inputs(): AddConnectorCall__Inputs {
    return new AddConnectorCall__Inputs(this);
  }

  get outputs(): AddConnectorCall__Outputs {
    return new AddConnectorCall__Outputs(this);
  }
}

export class AddConnectorCall__Inputs {
  _call: AddConnectorCall;

  constructor(call: AddConnectorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _weight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _enableVirtualBalance(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class AddConnectorCall__Outputs {
  _call: AddConnectorCall;

  constructor(call: AddConnectorCall) {
    this._call = call;
  }
}

export class WithdrawFromTokenCall extends EthereumCall {
  get inputs(): WithdrawFromTokenCall__Inputs {
    return new WithdrawFromTokenCall__Inputs(this);
  }

  get outputs(): WithdrawFromTokenCall__Outputs {
    return new WithdrawFromTokenCall__Outputs(this);
  }
}

export class WithdrawFromTokenCall__Inputs {
  _call: WithdrawFromTokenCall;

  constructor(call: WithdrawFromTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawFromTokenCall__Outputs {
  _call: WithdrawFromTokenCall;

  constructor(call: WithdrawFromTokenCall) {
    this._call = call;
  }
}

export class ClearQuickBuyPathCall extends EthereumCall {
  get inputs(): ClearQuickBuyPathCall__Inputs {
    return new ClearQuickBuyPathCall__Inputs(this);
  }

  get outputs(): ClearQuickBuyPathCall__Outputs {
    return new ClearQuickBuyPathCall__Outputs(this);
  }
}

export class ClearQuickBuyPathCall__Inputs {
  _call: ClearQuickBuyPathCall;

  constructor(call: ClearQuickBuyPathCall) {
    this._call = call;
  }
}

export class ClearQuickBuyPathCall__Outputs {
  _call: ClearQuickBuyPathCall;

  constructor(call: ClearQuickBuyPathCall) {
    this._call = call;
  }
}

export class DisableConnectorPurchasesCall extends EthereumCall {
  get inputs(): DisableConnectorPurchasesCall__Inputs {
    return new DisableConnectorPurchasesCall__Inputs(this);
  }

  get outputs(): DisableConnectorPurchasesCall__Outputs {
    return new DisableConnectorPurchasesCall__Outputs(this);
  }
}

export class DisableConnectorPurchasesCall__Inputs {
  _call: DisableConnectorPurchasesCall;

  constructor(call: DisableConnectorPurchasesCall) {
    this._call = call;
  }

  get _connectorToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _disable(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class DisableConnectorPurchasesCall__Outputs {
  _call: DisableConnectorPurchasesCall;

  constructor(call: DisableConnectorPurchasesCall) {
    this._call = call;
  }
}

export class WithdrawTokensCall extends EthereumCall {
  get inputs(): WithdrawTokensCall__Inputs {
    return new WithdrawTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTokensCall__Outputs {
    return new WithdrawTokensCall__Outputs(this);
  }
}

export class WithdrawTokensCall__Inputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawTokensCall__Outputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }
}

export class ChangeCall extends EthereumCall {
  get inputs(): ChangeCall__Inputs {
    return new ChangeCall__Inputs(this);
  }

  get outputs(): ChangeCall__Outputs {
    return new ChangeCall__Outputs(this);
  }
}

export class ChangeCall__Inputs {
  _call: ChangeCall;

  constructor(call: ChangeCall) {
    this._call = call;
  }

  get _fromToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _toToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ChangeCall__Outputs {
  _call: ChangeCall;

  constructor(call: ChangeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SellCall extends EthereumCall {
  get inputs(): SellCall__Inputs {
    return new SellCall__Inputs(this);
  }

  get outputs(): SellCall__Outputs {
    return new SellCall__Outputs(this);
  }
}

export class SellCall__Inputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }

  get _connectorToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sellAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SellCall__Outputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ConvertCall extends EthereumCall {
  get inputs(): ConvertCall__Inputs {
    return new ConvertCall__Inputs(this);
  }

  get outputs(): ConvertCall__Outputs {
    return new ConvertCall__Outputs(this);
  }
}

export class ConvertCall__Inputs {
  _call: ConvertCall;

  constructor(call: ConvertCall) {
    this._call = call;
  }

  get _fromToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _toToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConvertCall__Outputs {
  _call: ConvertCall;

  constructor(call: ConvertCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AcceptOwnershipCall extends EthereumCall {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class DisableTokenTransfersCall extends EthereumCall {
  get inputs(): DisableTokenTransfersCall__Inputs {
    return new DisableTokenTransfersCall__Inputs(this);
  }

  get outputs(): DisableTokenTransfersCall__Outputs {
    return new DisableTokenTransfersCall__Outputs(this);
  }
}

export class DisableTokenTransfersCall__Inputs {
  _call: DisableTokenTransfersCall;

  constructor(call: DisableTokenTransfersCall) {
    this._call = call;
  }

  get _disable(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class DisableTokenTransfersCall__Outputs {
  _call: DisableTokenTransfersCall;

  constructor(call: DisableTokenTransfersCall) {
    this._call = call;
  }
}

export class BuyCall extends EthereumCall {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get _connectorToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _depositAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AcceptManagementCall extends EthereumCall {
  get inputs(): AcceptManagementCall__Inputs {
    return new AcceptManagementCall__Inputs(this);
  }

  get outputs(): AcceptManagementCall__Outputs {
    return new AcceptManagementCall__Outputs(this);
  }
}

export class AcceptManagementCall__Inputs {
  _call: AcceptManagementCall;

  constructor(call: AcceptManagementCall) {
    this._call = call;
  }
}

export class AcceptManagementCall__Outputs {
  _call: AcceptManagementCall;

  constructor(call: AcceptManagementCall) {
    this._call = call;
  }
}

export class SetQuickBuyPathCall extends EthereumCall {
  get inputs(): SetQuickBuyPathCall__Inputs {
    return new SetQuickBuyPathCall__Inputs(this);
  }

  get outputs(): SetQuickBuyPathCall__Outputs {
    return new SetQuickBuyPathCall__Outputs(this);
  }
}

export class SetQuickBuyPathCall__Inputs {
  _call: SetQuickBuyPathCall;

  constructor(call: SetQuickBuyPathCall) {
    this._call = call;
  }

  get _path(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetQuickBuyPathCall__Outputs {
  _call: SetQuickBuyPathCall;

  constructor(call: SetQuickBuyPathCall) {
    this._call = call;
  }
}

export class TransferManagementCall extends EthereumCall {
  get inputs(): TransferManagementCall__Inputs {
    return new TransferManagementCall__Inputs(this);
  }

  get outputs(): TransferManagementCall__Outputs {
    return new TransferManagementCall__Outputs(this);
  }
}

export class TransferManagementCall__Inputs {
  _call: TransferManagementCall;

  constructor(call: TransferManagementCall) {
    this._call = call;
  }

  get _newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferManagementCall__Outputs {
  _call: TransferManagementCall;

  constructor(call: TransferManagementCall) {
    this._call = call;
  }
}

export class SetConversionFeeCall extends EthereumCall {
  get inputs(): SetConversionFeeCall__Inputs {
    return new SetConversionFeeCall__Inputs(this);
  }

  get outputs(): SetConversionFeeCall__Outputs {
    return new SetConversionFeeCall__Outputs(this);
  }
}

export class SetConversionFeeCall__Inputs {
  _call: SetConversionFeeCall;

  constructor(call: SetConversionFeeCall) {
    this._call = call;
  }

  get _conversionFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetConversionFeeCall__Outputs {
  _call: SetConversionFeeCall;

  constructor(call: SetConversionFeeCall) {
    this._call = call;
  }
}

export class QuickConvertCall extends EthereumCall {
  get inputs(): QuickConvertCall__Inputs {
    return new QuickConvertCall__Inputs(this);
  }

  get outputs(): QuickConvertCall__Outputs {
    return new QuickConvertCall__Outputs(this);
  }
}

export class QuickConvertCall__Inputs {
  _call: QuickConvertCall;

  constructor(call: QuickConvertCall) {
    this._call = call;
  }

  get _path(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class QuickConvertCall__Outputs {
  _call: QuickConvertCall;

  constructor(call: QuickConvertCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _extensions(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _maxConversionFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _connectorToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _connectorWeight(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends EthereumCall {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
