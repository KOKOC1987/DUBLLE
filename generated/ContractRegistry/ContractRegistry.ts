// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class AddressUpdate extends EthereumEvent {
  get params(): AddressUpdate__Params {
    return new AddressUpdate__Params(this);
  }
}

export class AddressUpdate__Params {
  _event: AddressUpdate;

  constructor(event: AddressUpdate) {
    this._event = event;
  }

  get _contractName(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerUpdate extends EthereumEvent {
  get params(): OwnerUpdate__Params {
    return new OwnerUpdate__Params(this);
  }
}

export class OwnerUpdate__Params {
  _event: OwnerUpdate;

  constructor(event: OwnerUpdate) {
    this._event = event;
  }

  get _prevOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ContractRegistry extends SmartContract {
  static bind(address: Address): ContractRegistry {
    return new ContractRegistry("ContractRegistry", address);
  }

  BANCOR_CONVERTER_UPGRADER(): Bytes {
    let result = super.call("BANCOR_CONVERTER_UPGRADER", []);

    return result[0].toBytes();
  }

  try_BANCOR_CONVERTER_UPGRADER(): CallResult<Bytes> {
    let result = super.tryCall("BANCOR_CONVERTER_UPGRADER", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  BNT_TOKEN(): Bytes {
    let result = super.call("BNT_TOKEN", []);

    return result[0].toBytes();
  }

  try_BNT_TOKEN(): CallResult<Bytes> {
    let result = super.tryCall("BNT_TOKEN", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getAddress(_contractName: Bytes): Address {
    let result = super.call("getAddress", [
      EthereumValue.fromFixedBytes(_contractName)
    ]);

    return result[0].toAddress();
  }

  try_getAddress(_contractName: Bytes): CallResult<Address> {
    let result = super.tryCall("getAddress", [
      EthereumValue.fromFixedBytes(_contractName)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  CONTRACT_REGISTRY(): Bytes {
    let result = super.call("CONTRACT_REGISTRY", []);

    return result[0].toBytes();
  }

  try_CONTRACT_REGISTRY(): CallResult<Bytes> {
    let result = super.tryCall("CONTRACT_REGISTRY", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  contractNames(param0: BigInt): string {
    let result = super.call("contractNames", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_contractNames(param0: BigInt): CallResult<string> {
    let result = super.tryCall("contractNames", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  BANCOR_CONVERTER_FACTORY(): Bytes {
    let result = super.call("BANCOR_CONVERTER_FACTORY", []);

    return result[0].toBytes();
  }

  try_BANCOR_CONVERTER_FACTORY(): CallResult<Bytes> {
    let result = super.tryCall("BANCOR_CONVERTER_FACTORY", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  BNT_CONVERTER(): Bytes {
    let result = super.call("BNT_CONVERTER", []);

    return result[0].toBytes();
  }

  try_BNT_CONVERTER(): CallResult<Bytes> {
    let result = super.tryCall("BNT_CONVERTER", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  itemCount(): BigInt {
    let result = super.call("itemCount", []);

    return result[0].toBigInt();
  }

  try_itemCount(): CallResult<BigInt> {
    let result = super.tryCall("itemCount", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  BANCOR_FORMULA(): Bytes {
    let result = super.call("BANCOR_FORMULA", []);

    return result[0].toBytes();
  }

  try_BANCOR_FORMULA(): CallResult<Bytes> {
    let result = super.tryCall("BANCOR_FORMULA", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  CONTRACT_FEATURES(): Bytes {
    let result = super.call("CONTRACT_FEATURES", []);

    return result[0].toBytes();
  }

  try_CONTRACT_FEATURES(): CallResult<Bytes> {
    let result = super.tryCall("CONTRACT_FEATURES", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  BANCOR_NETWORK(): Bytes {
    let result = super.call("BANCOR_NETWORK", []);

    return result[0].toBytes();
  }

  try_BANCOR_NETWORK(): CallResult<Bytes> {
    let result = super.tryCall("BANCOR_NETWORK", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  BANCOR_GAS_PRICE_LIMIT(): Bytes {
    let result = super.call("BANCOR_GAS_PRICE_LIMIT", []);

    return result[0].toBytes();
  }

  try_BANCOR_GAS_PRICE_LIMIT(): CallResult<Bytes> {
    let result = super.tryCall("BANCOR_GAS_PRICE_LIMIT", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  addressOf(_contractName: Bytes): Address {
    let result = super.call("addressOf", [
      EthereumValue.fromFixedBytes(_contractName)
    ]);

    return result[0].toAddress();
  }

  try_addressOf(_contractName: Bytes): CallResult<Address> {
    let result = super.tryCall("addressOf", [
      EthereumValue.fromFixedBytes(_contractName)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  BANCOR_X(): Bytes {
    let result = super.call("BANCOR_X", []);

    return result[0].toBytes();
  }

  try_BANCOR_X(): CallResult<Bytes> {
    let result = super.tryCall("BANCOR_X", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  newOwner(): Address {
    let result = super.call("newOwner", []);

    return result[0].toAddress();
  }

  try_newOwner(): CallResult<Address> {
    let result = super.tryCall("newOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class UnregisterAddressCall extends EthereumCall {
  get inputs(): UnregisterAddressCall__Inputs {
    return new UnregisterAddressCall__Inputs(this);
  }

  get outputs(): UnregisterAddressCall__Outputs {
    return new UnregisterAddressCall__Outputs(this);
  }
}

export class UnregisterAddressCall__Inputs {
  _call: UnregisterAddressCall;

  constructor(call: UnregisterAddressCall) {
    this._call = call;
  }

  get _contractName(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class UnregisterAddressCall__Outputs {
  _call: UnregisterAddressCall;

  constructor(call: UnregisterAddressCall) {
    this._call = call;
  }
}

export class RegisterAddressCall extends EthereumCall {
  get inputs(): RegisterAddressCall__Inputs {
    return new RegisterAddressCall__Inputs(this);
  }

  get outputs(): RegisterAddressCall__Outputs {
    return new RegisterAddressCall__Outputs(this);
  }
}

export class RegisterAddressCall__Inputs {
  _call: RegisterAddressCall;

  constructor(call: RegisterAddressCall) {
    this._call = call;
  }

  get _contractName(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterAddressCall__Outputs {
  _call: RegisterAddressCall;

  constructor(call: RegisterAddressCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends EthereumCall {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
